{"version":3,"sources":["components/todos/AddTodo.js","components/todos/Todo.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","this","props","item","handleChange","onSubmit","handleSubmit","type","onChange","value","style","width","Component","Todo","handleDelete","handleEdit","done","textDecoration","color","title","className","onClick","handleDone","marginRight","padding","App","e","setState","target","newItem","id","state","updatedItems","items","todoSubmitted","uuid","editItem","clearList","filteredItems","filter","selectedItem","find","console","log","map","length","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6e03f6b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass AddTodo extends Component {\r\n\r\n  render() {\r\n    const { item, handleChange } = this.props;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n            value={item}\r\n            style={{ width: 100 + \"%\" }}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AddTodo;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Todo extends Component {\r\n  render() {\r\n    const { item, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <div>\r\n        <h6\r\n          style={\r\n            item.done ? { textDecoration: \"line-through\", color: \"green\" } : { textDecoration: \"none\", color: \"black\" }\r\n          }\r\n        >\r\n          {item.title}\r\n        </h6>\r\n        <div className=\"todo-icon\">\r\n          <span className=\"check\">\r\n            <i\r\n              className=\"fa fa-check fa-lg\"\r\n              onClick={this.props.handleDone}\r\n              style={{ marginRight: 87 + \"px\", padding: 10 + \"px\" }}\r\n            ></i>\r\n          </span>\r\n          <span className=\"edit\" onClick={handleEdit}>\r\n            <i\r\n              className=\"fa fa-edit fa-lg\"\r\n              style={{ marginRight: 40 + \"px\", padding: 10 + \"px\" }}\r\n            ></i>\r\n          </span>\r\n          <span className=\"deleteList\" onClick={handleDelete}>\r\n            <i\r\n              className=\"fa fa-trash-o fa-lg\"\r\n              style={{ marginRight: 2 + \"px\", padding: 10 + \"px\" }}\r\n            ></i>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport AddTodo from \"./components/todos/AddTodo\";\nimport Todo from \"./components/todos/Todo\";\nimport uuid from \"uuid\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todoSubmitted: false,\n      items: [],\n      id: uuid(),\n      item: \"\",\n      editItem: false\n    };\n  }\n\n  handleChange = e => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    // e.preventDefault();\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item,\n      done: false\n    };\n    // console.log(newItem);\n    const updatedItems = [...this.state.items, newItem];\n    this.setState({\n      todoSubmitted: true,\n      items: updatedItems,\n      item: \"\",\n      id: uuid(),\n      editItem: false\n    });\n  };\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n  };\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    this.setState({\n      items: filteredItems\n    });\n  };\n  handleEdit = id => {\n    // console.log(id);\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n\n    const selectedItem = this.state.items.find(item => item.id === id);\n    console.log(selectedItem);\n\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n\n  handleDone = id => {\n    const updatedItems = this.state.items.map(item => {\n      if (item.id === id) return { ...item, done: !item.done };\n      return item;\n    });\n    this.setState({ items: updatedItems });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>To-Do List</h1>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"input-buttons col-xs-11 col-sm-11\">\n              <AddTodo\n                item={this.state.item}\n                handleChange={this.handleChange}\n                handleSubmit={this.handleSubmit}\n                editItem={this.state.editItem}\n              />\n            </div>\n            <div className=\"input-buttons col-xs-1 col-sm-1\">\n              <p onClick={this.handleSubmit} className=\"add-todo\">\n                <i\n                  className={\n                    this.state.editItem\n                      ? \"fa fa-save fa-2x\"\n                      : \"fa fa-plus fa-2x\"\n                  }\n                ></i>\n              </p>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <ul className=\"todo-list\">\n              {this.state.items.length > 0 ? (\n                this.state.items.map(item => {\n                  return (\n                    <li\n                      key={item.id}\n                      className=\"todo\"\n                      style={{ width: 100 + \"%\" }}\n                    >\n                      <Todo\n                        handleDone={() => this.handleDone(item.id)}\n                        item={item}\n                        handleDelete={() => this.handleDelete(item.id)}\n                        handleEdit={() => this.handleEdit(item.id)}\n                      />\n                    </li>\n                  );\n                })\n              ) : (\n                <p key=\"message\" className=\"center\">\n                  You have no todo's left{\" \"}\n                </p>\n              )}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}